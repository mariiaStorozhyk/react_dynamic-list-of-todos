{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","changeUser","selectedUserId","useState","qwery","setQwery","visibleTodos","setVisibleTodos","selectedOption","setSelectedOption","useEffect","finalQwery","toLowerCase","filter","todo","title","includes","completed","className","type","placeholder","value","onChange","event","target","map","classNames","htmlFor","id","checked","readOnly","userId","onClick","request","url","fetch","then","response","json","CurrentUser","clearUser","selectedUser","setSelectedUser","getUserByID","user","name","email","phone","App","setSelectedUserId","setTodos","allTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f4ecb62.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  changeUser: (userId: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, changeUser, selectedUserId,\n}) => {\n  const [qwery, setQwery] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('');\n\n  useEffect(() => {\n    const finalQwery = qwery.toLowerCase();\n\n    setVisibleTodos(todos.filter(todo => {\n      if (!todo.title.includes(finalQwery)) {\n        return false;\n      }\n\n      switch (selectedOption) {\n        case 'all':\n          return true;\n\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    }));\n  }, [qwery, selectedOption, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter text\"\n        value={qwery}\n        onChange={(event) => setQwery(event.target.value)}\n      />\n\n      <select\n        value={selectedOption}\n        onChange={(event) => setSelectedOption(event.target.value)}\n      >\n        <option value=\"all\"> All </option>\n        <option value=\"active\"> Active </option>\n        <option value=\"completed\"> Completed </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => {\n                  changeUser(todo.userId);\n                }}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserByID = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserByID } from '../../api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUserByID(userId)\n      .then(user => setSelectedUser(user));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {selectedUser?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => clearUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { Todo } from './types/Todo';\nimport { getAllTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getAllTodos()\n      .then(allTodos => setTodos(allTodos));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          changeUser={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}