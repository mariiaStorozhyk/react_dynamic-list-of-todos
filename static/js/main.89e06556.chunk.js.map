{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","TodoList","todos","changeUser","selectedUserId","useState","qwery","setQwery","visibleTodos","setVisibleTodos","selectedOption","setSelectedOption","useEffect","finalQwery","toLowerCase","filter","todo","title","includes","all","active","completed","className","type","placeholder","value","onChange","event","target","map","classNames","htmlFor","id","checked","readOnly","userId","onClick","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","clearUser","selectedUser","setSelectedUser","loaded","setLoaded","hasLoadingError","setHasLoadingError","getUserByID","user","catch","name","email","phone","App","setSelectedUserId","setTodos","loadingError","setLoadingError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89e06556.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  changeUser: (userId: number) => void;\n  selectedUserId: number;\n};\n\nenum Options {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, changeUser, selectedUserId,\n}) => {\n  const [qwery, setQwery] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('');\n\n  useEffect(() => {\n    const finalQwery = qwery.toLowerCase();\n\n    setVisibleTodos(todos.filter(todo => {\n      if (!todo.title.includes(finalQwery)) {\n        return false;\n      }\n\n      switch (selectedOption) {\n        case Options.all:\n          return true;\n\n        case Options.active:\n          return !todo.completed;\n\n        case Options.completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    }));\n  }, [qwery, selectedOption, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter text\"\n        value={qwery}\n        onChange={(event) => setQwery(event.target.value)}\n      />\n\n      <select\n        value={selectedOption}\n        onChange={(event) => setSelectedOption(event.target.value)}\n      >\n        <option value=\"all\"> All </option>\n        <option value=\"active\"> Active </option>\n        <option value=\"completed\"> Completed </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => {\n                  changeUser(todo.userId);\n                }}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserByID = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserByID } from '../../api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [loaded, setLoaded] = useState(true);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    setLoaded(false);\n    getUserByID(userId)\n      .then(user => {\n        setSelectedUser(user);\n        setLoaded(true);\n      })\n      .catch(() => setHasLoadingError(true));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {hasLoadingError ? (\n        <p className=\"CurrentUser__name\">\n          There was an error loading the data.\n          Please check the data or try again later.\n        </p>\n      ) : (\n        <>\n          {loaded ? (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {selectedUser?.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n              <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n              <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => clearUser(0)}\n              >\n                Clear\n              </button>\n            </>\n          ) : (\n            <p className=\"CurrentUser__name\">Loading...</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { Todo } from './types/Todo';\nimport { getAllTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    getAllTodos()\n      .then(setTodos)\n      .then(() => setLoaded(true))\n      .catch(() => {\n        setLoadingError(true);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {loadingError ? (\n        <div className=\"App__sidebar\">\n          <p className=\"CurrentUser__name\">\n            There was an error loading the data.\n            Please check the data or try again later.\n          </p>\n        </div>\n      ) : (\n        <>\n          <div className=\"App__sidebar\">\n            {loaded ? (\n              <TodoList\n                todos={todos}\n                changeUser={setSelectedUserId}\n                selectedUserId={selectedUserId}\n              />\n            ) : (\n              <p className=\"CurrentUser__name\">Loading...</p>\n            )}\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={setSelectedUserId}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}